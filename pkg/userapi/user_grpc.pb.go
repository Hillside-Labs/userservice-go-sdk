// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: user.proto

package userapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Users_Create_FullMethodName                     = "/userapi.Users/Create"
	Users_Get_FullMethodName                        = "/userapi.Users/Get"
	Users_Update_FullMethodName                     = "/userapi.Users/Update"
	Users_Find_FullMethodName                       = "/userapi.Users/Find"
	Users_Delete_FullMethodName                     = "/userapi.Users/Delete"
	Users_LogEvent_FullMethodName                   = "/userapi.Users/LogEvent"
	Users_SearchUserTraits_FullMethodName           = "/userapi.Users/SearchUserTraits"
	Users_GetUsersByTraits_FullMethodName           = "/userapi.Users/GetUsersByTraits"
	Users_GetUsersByAggregatedTraits_FullMethodName = "/userapi.Users/GetUsersByAggregatedTraits"
	Users_GetAggregateForUsers_FullMethodName       = "/userapi.Users/GetAggregateForUsers"
	Users_GetUsersByEvents_FullMethodName           = "/userapi.Users/GetUsersByEvents"
	Users_SearchEvents_FullMethodName               = "/userapi.Users/SearchEvents"
	Users_NaturalBreaks_FullMethodName              = "/userapi.Users/NaturalBreaks"
	Users_NaturalBreaksQueried_FullMethodName       = "/userapi.Users/NaturalBreaksQueried"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	Create(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*UserResponse, error)
	Get(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	Update(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	Find(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*UserListResponse, error)
	Delete(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	LogEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	SearchUserTraits(ctx context.Context, in *SearchUserTraitsRequest, opts ...grpc.CallOption) (*SearchUserTraitsResponse, error)
	GetUsersByTraits(ctx context.Context, in *SearchUserTraitsRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	GetUsersByAggregatedTraits(ctx context.Context, in *GetUsersByAggregatedTraitsRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	GetAggregateForUsers(ctx context.Context, in *GetAggregateForUsersRequest, opts ...grpc.CallOption) (*AggregateResponse, error)
	GetUsersByEvents(ctx context.Context, in *SearchUserEventsRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	SearchEvents(ctx context.Context, in *SearchEventsRequest, opts ...grpc.CallOption) (*SearchEventsResponse, error)
	NaturalBreaks(ctx context.Context, in *NaturalBreaksRequest, opts ...grpc.CallOption) (*NaturalBreaksResponse, error)
	NaturalBreaksQueried(ctx context.Context, in *NaturalBreaksQueryRequest, opts ...grpc.CallOption) (*NaturalBreaksResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) Create(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Users_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Users_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Update(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Users_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Find(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, Users_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Delete(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Users_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LogEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, Users_LogEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SearchUserTraits(ctx context.Context, in *SearchUserTraitsRequest, opts ...grpc.CallOption) (*SearchUserTraitsResponse, error) {
	out := new(SearchUserTraitsResponse)
	err := c.cc.Invoke(ctx, Users_SearchUserTraits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersByTraits(ctx context.Context, in *SearchUserTraitsRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, Users_GetUsersByTraits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersByAggregatedTraits(ctx context.Context, in *GetUsersByAggregatedTraitsRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, Users_GetUsersByAggregatedTraits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetAggregateForUsers(ctx context.Context, in *GetAggregateForUsersRequest, opts ...grpc.CallOption) (*AggregateResponse, error) {
	out := new(AggregateResponse)
	err := c.cc.Invoke(ctx, Users_GetAggregateForUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersByEvents(ctx context.Context, in *SearchUserEventsRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, Users_GetUsersByEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SearchEvents(ctx context.Context, in *SearchEventsRequest, opts ...grpc.CallOption) (*SearchEventsResponse, error) {
	out := new(SearchEventsResponse)
	err := c.cc.Invoke(ctx, Users_SearchEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NaturalBreaks(ctx context.Context, in *NaturalBreaksRequest, opts ...grpc.CallOption) (*NaturalBreaksResponse, error) {
	out := new(NaturalBreaksResponse)
	err := c.cc.Invoke(ctx, Users_NaturalBreaks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NaturalBreaksQueried(ctx context.Context, in *NaturalBreaksQueryRequest, opts ...grpc.CallOption) (*NaturalBreaksResponse, error) {
	out := new(NaturalBreaksResponse)
	err := c.cc.Invoke(ctx, Users_NaturalBreaksQueried_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	Create(context.Context, *NewUser) (*UserResponse, error)
	Get(context.Context, *UserRequest) (*UserResponse, error)
	Update(context.Context, *UserRequest) (*UserResponse, error)
	Find(context.Context, *UserQuery) (*UserListResponse, error)
	Delete(context.Context, *UserRequest) (*UserResponse, error)
	LogEvent(context.Context, *EventRequest) (*EventResponse, error)
	SearchUserTraits(context.Context, *SearchUserTraitsRequest) (*SearchUserTraitsResponse, error)
	GetUsersByTraits(context.Context, *SearchUserTraitsRequest) (*UserListResponse, error)
	GetUsersByAggregatedTraits(context.Context, *GetUsersByAggregatedTraitsRequest) (*UserListResponse, error)
	GetAggregateForUsers(context.Context, *GetAggregateForUsersRequest) (*AggregateResponse, error)
	GetUsersByEvents(context.Context, *SearchUserEventsRequest) (*UserListResponse, error)
	SearchEvents(context.Context, *SearchEventsRequest) (*SearchEventsResponse, error)
	NaturalBreaks(context.Context, *NaturalBreaksRequest) (*NaturalBreaksResponse, error)
	NaturalBreaksQueried(context.Context, *NaturalBreaksQueryRequest) (*NaturalBreaksResponse, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) Create(context.Context, *NewUser) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUsersServer) Get(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUsersServer) Update(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUsersServer) Find(context.Context, *UserQuery) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedUsersServer) Delete(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUsersServer) LogEvent(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogEvent not implemented")
}
func (UnimplementedUsersServer) SearchUserTraits(context.Context, *SearchUserTraitsRequest) (*SearchUserTraitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserTraits not implemented")
}
func (UnimplementedUsersServer) GetUsersByTraits(context.Context, *SearchUserTraitsRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByTraits not implemented")
}
func (UnimplementedUsersServer) GetUsersByAggregatedTraits(context.Context, *GetUsersByAggregatedTraitsRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByAggregatedTraits not implemented")
}
func (UnimplementedUsersServer) GetAggregateForUsers(context.Context, *GetAggregateForUsersRequest) (*AggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateForUsers not implemented")
}
func (UnimplementedUsersServer) GetUsersByEvents(context.Context, *SearchUserEventsRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByEvents not implemented")
}
func (UnimplementedUsersServer) SearchEvents(context.Context, *SearchEventsRequest) (*SearchEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (UnimplementedUsersServer) NaturalBreaks(context.Context, *NaturalBreaksRequest) (*NaturalBreaksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NaturalBreaks not implemented")
}
func (UnimplementedUsersServer) NaturalBreaksQueried(context.Context, *NaturalBreaksQueryRequest) (*NaturalBreaksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NaturalBreaksQueried not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Create(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Update(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Find(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Delete(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_LogEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LogEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SearchUserTraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserTraitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SearchUserTraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_SearchUserTraits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SearchUserTraits(ctx, req.(*SearchUserTraitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersByTraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserTraitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersByTraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUsersByTraits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersByTraits(ctx, req.(*SearchUserTraitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersByAggregatedTraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByAggregatedTraitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersByAggregatedTraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUsersByAggregatedTraits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersByAggregatedTraits(ctx, req.(*GetUsersByAggregatedTraitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetAggregateForUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregateForUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAggregateForUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetAggregateForUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAggregateForUsers(ctx, req.(*GetAggregateForUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersByEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersByEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUsersByEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersByEvents(ctx, req.(*SearchUserEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_SearchEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SearchEvents(ctx, req.(*SearchEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NaturalBreaks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaturalBreaksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NaturalBreaks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_NaturalBreaks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NaturalBreaks(ctx, req.(*NaturalBreaksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NaturalBreaksQueried_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaturalBreaksQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NaturalBreaksQueried(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_NaturalBreaksQueried_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NaturalBreaksQueried(ctx, req.(*NaturalBreaksQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userapi.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Users_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Users_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Users_Update_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Users_Find_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Users_Delete_Handler,
		},
		{
			MethodName: "LogEvent",
			Handler:    _Users_LogEvent_Handler,
		},
		{
			MethodName: "SearchUserTraits",
			Handler:    _Users_SearchUserTraits_Handler,
		},
		{
			MethodName: "GetUsersByTraits",
			Handler:    _Users_GetUsersByTraits_Handler,
		},
		{
			MethodName: "GetUsersByAggregatedTraits",
			Handler:    _Users_GetUsersByAggregatedTraits_Handler,
		},
		{
			MethodName: "GetAggregateForUsers",
			Handler:    _Users_GetAggregateForUsers_Handler,
		},
		{
			MethodName: "GetUsersByEvents",
			Handler:    _Users_GetUsersByEvents_Handler,
		},
		{
			MethodName: "SearchEvents",
			Handler:    _Users_SearchEvents_Handler,
		},
		{
			MethodName: "NaturalBreaks",
			Handler:    _Users_NaturalBreaks_Handler,
		},
		{
			MethodName: "NaturalBreaksQueried",
			Handler:    _Users_NaturalBreaksQueried_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
